enum PeerType {
  peer
  manager
  report
  vendor
  client
  partner
}

type UserSession {
  id: ObjID
  host: String
  client: String  
  started: Date
  expires: Date
  refresh: String
}

type Peer {
  user: User
  relationship: PeerType
  isInternal: Boolean
}

type UserPeers {
  organization: Organization
  user: User
  allowEdit: Boolean
  peers: [Peer]
}

type UserMembership {  
  clientId: ReactoryClient
  organization: Organization
  businessUnit: BusinessUnit
  roles: [String]
  enabled: Boolean
}

type User {
  id: ObjID!
  username: String
  firstName: String
  lastName: String
  email: String  
  peers: UserPeers,  
  salt: String,
  password: String
  avatar: String
  authProvider: AuthProvider!
  providerId: String!
  lastLogin: Date
  organization: Organization
  businessUnit: BusinessUnit  
  roles: [String]  
  memberships: [UserMembership]
  sessionInfo: [UserSession]
  legacyId: Float
  createdAt: Float!
  updatedAt: Float!
}

type Comment {
  id: ObjID
  who: User
  text: String
  when: Float
}

extend type Query {
  allUsers: [User],
  userWithId(id: String!): User!
  authenticatedUser: User,
  userInbox(id: String, sort: String): [Email]   
}

input CreateUserInput {
  email: String!
  firstName: String!
  lastName: String!
  avatar: String
  businessUnit: String  
  authProvider: AuthProvider
  providerId: String
}

input InvitePeer {
  email: String
}

input UpdateUserInput {
  id: String
  email: String
  avatar: String
  firstName: String
  lastName: String
  authProvider: String
  businessUnit: String
  providerId: String
  lastLogin: Date
}

input UpdatePasswordInput {  
  password: String
  confirmPassword: String
  authToken: String
}

extend type Mutation {
  createUser(input: CreateUserInput!, organizationId: String!): User
  updateUser(id: String!, profileData: UpdateUserInput!): User
  removeUser(id: String!): Boolean
  setPassword(input: UpdatePasswordInput!): User  
}

extend type Subscription {
  userCreated: User
  userUpdated: User
  userRemoved: ObjID
}