enum Role {
    SYSADMIN,
    ADMIN,
    ORG_ADMIN,
    FACILITATOR,        
    USER,
    HOD
}

enum AuthProvider {
  GOOGLE
  FACEBOOK
  CUSTOM,
  LOCAL
}

type UserSession {
  id: ObjID
  host: String
  client: String  
  started: Date
  expires: Date
  refresh: String
}


type User {
  id: ObjID!
  username: String
  firstName: String
  lastName: String
  email: String
  businessUnit: String,
  salt: String,
  password: String
  avatar: String
  authProvider: AuthProvider!
  providerId: String!
  lastLogin: Date  
  roles: [Role]
  sessionInfo: [UserSession]
  legacyId: Float
  createdAt: Float!
  updatedAt: Float!
}

extend type Query {
  allUsers: [User],
  userWithId(id: String!): User!
  authenticatedUser: User,
  userInbox(id: String, sort: String): [Email]  
}

input CreateUserInput {
  email: String!
  firstName: String!
  lastName: String!
  avatar: String
  businessUnit: String  
  authProvider: AuthProvider
  providerId: String
}

input UpdateUserInput {
  id: String
  email: String
  avatar: String
  firstName: String
  lastName: String
  authProvider: String
  businessUnit: String
  providerId: String
  lastLogin: Date
}

input UpdatePasswordInput {  
  password: String
  confirmPassword: String
  authToken: String
}

extend type Mutation {
  createUser(input: CreateUserInput!, organizationId: String!): User
  updateUser(id: String!, profileData: UpdateUserInput!): User
  removeUser(id: String!): Boolean
  setPassword(input: UpdatePasswordInput!): User
}

extend type Subscription {
  userCreated: User
  userUpdated: User
  userRemoved: ObjID
}