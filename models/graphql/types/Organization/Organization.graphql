type CorsWhiteList {
  key: String!,
  host: String!    
}

type Tennant {
  id: ObjID!
  key: String!
  title: String
  theme: String
  whitelist: [CorsWhiteList]
  createdAt: Float!
  updatedAt: Float!
}

input CreateTennantInput {
  key: String!
  title: String
  theme: String  
}

type Organization {
  id: ObjID
  code: String
  name: String
  logo: String
  legacyId: Int      
  createdAt: Float!
  updatedAt: Float!
}

input CreateOrganizationInput {
  code: String
  name: String
  logo: String
  legacyId: Int
}

input UpdateOrganizationInput {
  code: String
  name: String
  logo: String
  legacyId: Int
}

input MigrationOrganizationOptions {
  migrateBrands: Boolean
  migrateEmployees: Boolean
  migrateSurveys: Boolean
  migrateCommunications: Boolean
  dataPath: String
}

type UpdateResponse {
  id: ObjID
  errors: [String]
  updated: Boolean
}

type MigrationResult {
  assessmentsMigrated: Int
  assessmentErrors: [String]
  organization: Organization
  organizationErrors: [String]
  brandsMigrated: Int
  brandErrors: [String]
  employeesMigrated: Int
  employeeErrors: [String]
  surveysMigrated: Int
  surveyErrors: [String]
  communicationsMigrated: Int
  communicationsErrors: [String]
}

input CoreMigrationOptions {
  migrateOrganizations: [Int],
  migrateBrands: Boolean
  migrateEmployees: Boolean
  migrateSurveys: Boolean
  migrateCommunications: Boolean
  dataPath: String
}

type CoreMigrationResult {
  errors: [String]
  scalesMigrated: Int,
  organizationMigrateResults: [MigrationResult]
}

extend type Query {
  allTennants: [Tennant]
  allOrganizations(legacy: Boolean): [Organization]
  organizationWithId(id: String!): Organization 
  usersForOrganizationWithId(id: String!, searchString: String): [User] 
}

extend type Mutation {
  createOrganization(input: CreateOrganizationInput!): Organization
  updateOrganization(id: String!, input: UpdateOrganizationInput!): Organization
  migrateOrganization(id: String!, options: MigrationOrganizationOptions!): MigrationResult
  migrateCore(options: CoreMigrationOptions): CoreMigrationResult
}
