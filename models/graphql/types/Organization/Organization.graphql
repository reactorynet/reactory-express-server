type CorsWhiteList {
  key: String!,
  host: String!    
}

type Tennant {
  id: ObjID!
  key: String!
  title: String
  theme: String
  whitelist: [CorsWhiteList]
  createdAt: Float!
  updatedAt: Float!
}

input CreateTennantInput {
  key: String!
  title: String
  theme: String  
}

type Organization {
  id: ObjID
  code: String
  name: String
  logo: String
  legacyId: Int      
  createdAt: Float!
  updatedAt: Float!
}

input CreateOrganizationInput {
  code: String
  name: String
  logo: String
  legacyId: Int
}

input UpdateOrganizationInput {
  code: String
  name: String
  logo: String
  legacyId: Int
}

input MigrationOrganizationOptions {
  migrateBrands: Boolean,
  migrateEmployees: Boolean
}

type MigrationResult {
  organization: Organization
  organizationErrors: [String]
  brandsMigrated: Int
  brandErrors: [String]
  employeesMigrated: Int
  employeeErrors: [String]
}

extend type Query {
  allTennants: [Tennant]
  allOrganizations(legacy: Boolean): [Organization]
  organizationWithId(id: String!): Organization 
  usersForOrganizationWithId(id: String!): [User] 
}

extend type Mutation {
  createOrganization(input: CreateOrganizationInput!): Organization
  updateOrganization(id: String!, input: UpdateOrganizationInput!): Organization
  migrateOrganization(id: String!, options: MigrationOrganizationOptions!): MigrationResult
}
