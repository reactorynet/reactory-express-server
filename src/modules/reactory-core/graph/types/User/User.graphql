enum PeerType {
  peer
  manager
  report
  vendor
  client
  partner  
}

type UserSession {
  id: ObjID
  host: String
  client: String
  started: Date
  expires: Date
  refresh: String
}

type Peer {
  user: User
  relationship: PeerType
  isInternal: Boolean
  inviteSent: Boolean
  confirmed: Boolean
  confirmedAt: Date
}

type UserPeers {
  id: ObjID
  organization: Organization
  user: User
  allowEdit: Boolean
  peers: [Peer]
  confirmedAt: Date
  createdAt: Date
  updatedAt: Date
}

type UserMembership {
  id: String
  client: ReactoryClient
  organization: Organization
  businessUnit: BusinessUnit
  roles: [String]
  enabled: Boolean
  created: Date
  lastLogin: Date 
}

type UserAuthentication {
  id: ObjID
  provider: String
  props: Any
  lastLogin: Date
}

type UserMeta {
  id: ObjID
  lastSync: Date
  nextSync: Date
  mustSync: Boolean
  reference: String
  owner: String
  source: Any
}

"""
# User
The core reactory user object
"""
type User {
  id: ObjID!
  username: String
  firstName: String
  fullName: String
  fullNameWithEmail: String
  lastName: String
  dateOfBirth: Date
  email: String
  mobileNumber: String
  deleted: Boolean
  peers: UserPeers,
  salt: String,
  password: String
  avatar: String
  authProvider: AuthProvider!
  providerId: String!
  lastLogin: Date
  """
  Current active membership
  """
  organization: Organization
  """
  Business for the active membership
  """
  businessUnit: BusinessUnit

  roles: [String]
  """
  The current active membership for the user.
  """
  activeMembership: UserMembership
  memberships: [UserMembership]
  sessionInfo: [UserSession]
  authentications: [ UserAuthentication ]
  legacyId: Float
  createdAt: Float!
  updatedAt: Float!
  meta: UserMeta
}

type PagedUserResults {
  paging: PagingResult
  users: [User]
}

type Comment {
  id: ObjID
  who: User
  text: String
  when: Date
  upvoted: [User]
  upvotes: Int
  downvote: [User]
  downvotes: Int
  favorite: [User]
  favorites: Int
  flagged: Boolean
  removed: Boolean
  published: Boolean
}

type ProfileRefreshResult {
  user: User,
  messages: [ ReactoryUXMessage ]
}

extend type Query {
  allUsers: [User],
  userWithId(id: String!): User!
  userPeers(id: String!, organizationId: String): UserPeers
  refreshProfileData(id: String, skipImage: Boolean): ProfileRefreshResult
  authenticatedUser: User,
  userInbox(id: String, sort: String, via: String): [Email]
  searchUser(searchString: String!, sort: String): [User]
  getUserCredentials(provider: String!): UserAuthentication
}

input CreateUserInput {
  email: String!
  firstName: String!
  lastName: String!
  mobileNumber: String
  avatar: String
  businessUnit: String
  authProvider: AuthProvider
  providerId: String
}

input InvitePeer {
  email: String
}

input UpdateUserInput {
  id: String
  email: String
  avatar: String
  firstName: String
  lastName: String
  mobileNumber: String
  authProvider: String
  businessUnit: String
  providerId: String
  lastLogin: Date
  deleted: Boolean
}

input UpdatePasswordInput {
  password: String
  confirmPassword: String
  authToken: String
}

input PeerInput {
  user: String
  relationship: PeerType
  isInternal: Boolean
}

input SendMailInput {
  id: String!
  via: String!
  subject: String!
  contentType: String
  content: String!
  recipients: [String!]!
  ccRecipients: [String]
  bcc: [String]
  saveToSentItems: Boolean
}

input CreateTaskInput {
  id: String!
  via: String!
  subject: String!
  startDate: Date!
  dueDate: Date!
  timeZone: String
}

input DeleteTaskInput {
  via: String!
  taskId: String!
}

type SendMailResult {
  Successful: Boolean!
  Message: String!
  TaskId: String
}

extend type Mutation {
  """
  Default Create User Mutation - OrganizationId is currently required, but this will be dropped
  as a requirement in future versions. 
  """
  createUser(input: CreateUserInput!, organizationId: String!, password: String): User
  """
  Default Update User Mutation - Used to update a user's data.
  """
  updateUser(id: String!, profileData: UpdateUserInput!): User
  """
  Deletes a user with a given id
  """
  deleteUser(id: String!): Boolean
  """
  Sets an organization for a user with a particular id.
  """
  setOrganizationForUser(id: String!, organizationId: String) : Boolean
  """
  Sets the list of peers for a user.
  """
  setPeersForUser(id: String!, peers: [PeerInput], sendConfirmations: Boolean): UserPeers
  """
  Sets the relationship type for a peer
  """
  setPeerRelationShip(id: String!, peer: String!, organization: String!, relationship: PeerType): UserPeers
  """
  Removes a peer from the relationship
  """
  removePeer(id: String!, peer: String!, organization: String!): UserPeers
  """
  Removes user
  """
  removeUser(id: String!): Boolean
  """
  Used when updating a user's password.
  """
  setPassword(input: UpdatePasswordInput!): User
  """
  Confirms the peers for the user id and organization id
  """
  confirmPeers(id: String!, organization: String!, surveyId: String): UserPeers
  """
  Add a user role for a user
  """
  addUserRole(id: String, email: String, organization: String, role: String!, clientId: String): [UserMembership]
  """
  Remove a user role for a user
  """
  removeUserRole(id: String, email: String, organization: String, role: String!, clientId: String): [UserMembership]
  """
  # Add User Credentials
  Use this mutation to add authentication properties for the logged in user.

  Accepts two parameters a unique provider key, and an Any props parameter.
  This allows for the persisting of any shape of credentials, keys or tokens
  to be persisted for a given user.  This will be accessible to modules that know
  how to interpret the authentication.

  example of provider keys could be "local", "api.remote.system".  It is recommended 
  to stick to a uri format.

  The system does not automatically remove any of these keys and it should be managed
  by the workflow of the relevant module that uses the authentication. 
  """
  addUserCredentials(provider: String!, props: Any): Boolean
  """
  # Remove User Credentials
  Use this mutation to remove a authentication provider. This will delete the entry
  on the user document.   
  """
  removeUserCredentials(provider: String!): Boolean
  """
  Send mail message
  """
  sendMail(message: SendMailInput!): SendMailResult
  """
  NOTE - This mutation definition must be moved to the reactory AZURE module
  """
  createOutlookTask(task: CreateTaskInput!): SendMailResult
  """
  NOTE - This mutation definition must be moved to the reactory AZURE module
  """
  deleteOutlookTask(task: DeleteTaskInput!): SendMailResult
  """
  Used to update a user permission set
  """
  ReactoryCoreSetRolesForMembership(user_id: String!, id: String!, roles: [String]!): CoreSimpleResponse
  """
  Used to create a new user permission
  """
  ReactoryCoreCreateUserMembership(user_id: String!, organization: String, businessUnit: String, roles: [String]): UserMembership
  """
  # Set Active Membership
  Used when it is required to use the system within a specific membership.

  This may be to provide context specific to a membership.
  """
  ReactoryCoreSetActiveMembership(membership_id: String!): UserMembership
  """
  # Remove User Membership
  Used this mutation to remove a user membership.
  Returns a CoreSimpleResponse type.
  """
  ReactoryCoreRemoveUserMembership(user_id: String!, id: String!): CoreSimpleResponse
}

extend type Subscription {
  userCreated: User
  userUpdated: User
  userRemoved: ObjID
}
