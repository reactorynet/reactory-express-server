
"""
NaturalTokenizedInput is a type that represents a natural language input that has been tokenized.
"""
type NaturalTokenizedInput {
  lang: String
  input: String
  tokens: [String]
  tokenizer: String
}


enum NaturalSentimentVote {
  positive
  negative
  neutral
  very_postivity
  very_negative
}

type NaturalSentiment {
  """
  The language detected in the content.
  - currently returns language of user context.
  """
  lang: String
  """
  The input string that was provided
  """
  input: String
  """
  The sentiment score 
  """
  score: Float
  """
  sentiment vote
  """
  vote: String
}

type NaturalSpellCheckCorrection {
  word: String
  suggestions: [String]
}

type NaturalSpellCheckResult {
  lang: String
  input: String
  correct: Boolean
  corrections: [NaturalSpellCheckCorrection]
}

type NaturalPackageOutput {
  tokens: NaturalTokenizedInput
  stem: String
  ngrams: [String]
  jaroWinklerDistance: Float
  diceCoefficient: Float
  overlapCoefficient: Float
  levenshteinDistance: Int
  posTags: [String]
  sentiment: NaturalSentiment
  spellcheck: NaturalSpellCheckResult
  synonyms: [String]
  antonyms: [String]
  hypernyms: [String]
  hyponyms: [String]
  meronyms: [String]
  holonyms: [String]
  truncatedText: String
  normalizedText: String
  equals: Boolean
  randomString: String
  hash: String
  frequencyDistribution: Any
}

extend type Query {
  """
  Returns a list of all available tokenizers.
  """
  NaturalTokenizers: [String]
  """
  NaturalTokenize returns a NaturalTokenizedInput object that contains the tokens of the input string.
  """
  NaturalTokenize(input: String!, lang: String, tokenizer: String): NaturalTokenizedInput
  """
  NaturalSentiment returns a NaturalSentiment object that contains the sentiment score of the input string.
  """
  NaturalSentiment(input: String!, lang: String): NaturalSentiment
  """
  NaturalStem returns a string that contains the stem of the input string.
  """
  NaturalStem(input: String!, lang: String): String
  """
  NaturalNGrams returns a list of ngrams of the input string.
  """
  NaturalNGrams(input: String!, lang: String, n: Int): [String]
  """
  Completes a full package output for an input string and a comparator string.
  """
  NaturalPackagedOuput(input: String!, compare: String, lang: String): NaturalPackageOutput
}
