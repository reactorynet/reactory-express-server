type PaymentError {
  partnerId: String
  transactionReference: String
  message: String
  process: String
  severity: String
  when: Date
}

type PaymentTransactionMessage {
  sequence: Int
  direction: String
  payload: Any
  when: Date
  messageType: String
}

type PaymentTransaction {
  id: ObjID
  partnerId: String
  transactionId: String
  policyNumber: String
  product: String
  paymentSchedule: PaymentSchedule
  transactionLogs: Any
  messages: [PaymentTransactionMessage]
}

type PaymentClient {
  firstNames: String
  surname: String
  idNumber: String
  homePhone: String
}

type PaymentBankAccount {
  bankName: String
  branchCode: String
  branchName: String
  accountNo: String
  typeOfAccount: String
}

type PaymentSchedule {
  payAtNumber: String
  policyNumber: String
  paymentDay: Int
  paymentMethod: String
  paymentAmount: Float
  productName: String
  productType: String
  proposer: PaymentClient
  client: PaymentClient
  paymentBankAccount: PaymentBankAccount
  debitOrder: Any
}

type FileCounts {
  path: String
  count: Int
  files: [String]
}

type FileStats {  
  inbox: FileCounts
  outbox: FileCounts
  qaurantine: FileCounts
  sent: FileCounts
}

type AuditTrail {
  when: Date 
  startDate: Date
  endDate: Date 
  label: String
  files: FileStats
  paymentSchedules: [PaymentSchedule]
  transactions: [PaymentTransaction]
  errors: [PaymentError]
}
enum TargetEnvironment {
  LOCAL
  STAGING
  PRODUCTION
}

extend type Query {
  gatewayAuditTrail(from: Date, till: Date, target: TargetEnvironment = LOCAL): [AuditTrail]
}