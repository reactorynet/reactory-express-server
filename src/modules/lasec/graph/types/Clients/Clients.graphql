type LasecCRMCustomer {
  id: String
  registeredName: String
  tradingName: String
  accountNumber: String
  customerStatus: String
  accountType: String
  country: String
  customerClass: String
  description: String
  ranking: String
  availableBalance: Float
  salesTeam: String
  physicalAddressId: Int
  physicalAddress: String
  deliveryAddressId: Int
  deliveryAddress: String
  billingAddressId: Int
  billingAddress: String
  currencyCode: String
  currencySymbol: String
  currencyDisplay: String
  registrationNumber: String
  taxNumber: String
  importVATNumber: String
  creditLimit: Float
  currentBalance: Float
  currentInvoice: Float
  balance30Days: Float
  balance60Days: Float
  balance90Days: Float
  balance120Days: Float
  creditTotal: Float
  documents: [LasecDocument]
  specialRequirements: String
}

type LasecCRMOrganisation {
  id: String
  name: String
  description: String
}

# LasecGetClientDetail
type LasecCRMClient {
  id: String
  clientStatus: String
  emailAddress: String
  alternateEmail: String
  accountType: String
  isEmailDuplicate: Boolean
  isNameDuplicate: Boolean
  customer: LasecCRMCustomer
  title: String
  titleLabel: String
  fullName: String
  firstName: String
  lastName: String
  department: String
  jobTitle: String
  country: String
  salesTeam: String
  mobileNumber: String
  officeNumber: String
  alternateOfficeNumber: String
  availableBalance: Float
  creditLimit: Float

  faculty: String
  customerType: String
  lineManager: String
  lineManagerLabel: String
  jobType: String
  jobTypeLabel: String
  customerClassLabel: String

}

type LasecDocument {
  id: String
  filename: String
  link: String
  mimetype: String
  size: Int
  public: Boolean
  published: Boolean
  owner: User
}

type PagedLasecDocument {
  search: String
  filterBy: String
  paging: PagingResult
  documents: [LasecDocument]
}

type PagedCRMClient {
  search: String
  filterBy: String
  paging: PagingResult
  repCode: Any
  selectedClient: Any
  clients: [LasecCRMClient]
}

type PagedCRMCustomer {
  search: String
  filterBy: String
  paging: PagingResult
  customers: [LasecCRMCustomer]
}

type PagedCRMOrganisation {
  search: String
  filterBy: String
  paging: PagingResult
  organisations: [LasecCRMOrganisation]
}

type ClientDetailUpdateResponse {
  Success: Boolean
  Client: LasecCRMClient
}


"""
Lookup item for titles
"""
type LasecTitleLookupItem {
  id: String
  title: String
  long_title: String
}

type LasecCustomerClassLookupItem {
  id: String  
  key: String
  name: String
  description: String
}

type LasecFacultyListLookupItem {
  id: String  
  key: String
  name: String
  description: String
}

type LasecCustomerTypeLookupItem {
  id: String  
  key: String
  name: String
  description: String
}

type LasecLineManagerLookupItem {
  id: String  
  key: String
  name: String
  description: String
}

type LasecCustomerRankingLookupItem {
  id: String  
  key: String
  name: String
  description: String
}

type LasecCustomerRolesLookupItem {
  id: String  
  key: String
  name: String
  description: String
}

type LasecCustomerJobTypesLookupItem {
  id: String  
  key: String
  name: String
  description: String
}

type LasecCountryLookupItem {
  id: String  
  key: String
  name: String
  description: String
}

type LasecRepCodeLookupItem {
  id: String  
  key: String
  name: String
  description: String
}

type LasecCustomerFilterLookupItem {
  id: String  
  key: String
  name: String
  description: String
}






type CreateNewOrganisationResponse {
  id: Int
  success: Boolean
}

type LasecClientPersonalDetails {
  title: String
  firstName: String
  lastName: String
  country: String
  accountType: String
  repCode: String
}

type LasecAddress {
  id: String
  fullAddress: String
  formatted_address: String

  building_description_id: String
  building_description: String
  
  building_floor_number_id: String
  building_floor_description: String

  province_id: String
  province_name: String

  country_id: String
  country_name: String
  
  lat: String
  lng: String

  created_by: String
  last_edited_by: String
  map: Any

  linked_companies_count: Int,  
  linked_companies: [LasecCRMCustomer]

  linked_clients_count: Int,
  linked_clients: [LasecCRMClient]

  linked_sales_orders_count: Int,
  linked_sales_orders: [SalesOrder]

  linked_invoices_count: Int,

  linked_deliveries: Int
}

type LasecContactDetails {
  emailAddress: String
  confirmEmail: String
  alternateEmail: String
  confirmAlternateEmail: String
  mobileNumber: String
  alternateMobile: String
  officeNumber: String
  alternateOfficeNumber: String
  prefferedMethodOfContact: String
}

type LasecJobDetails {
  jobTitle: String
  salesTeam: String
  customerClass: String
  clientDepartment: String
  ranking: String
  faculty: String
  jobType: String
  jobTypeLabel: String
  customerType: String
  lineManager: String
  lineManagerLabel: String
}

type LasecClientAddresses {
  physicalAddress: LasecAddress
  deliveryAddress: LasecAddress
  billingAddress: LasecAddress
}

# LasecGetNewClient
type LasecNewClient {
  id: String
  personalDetails: LasecClientPersonalDetails
  contactDetails: LasecContactDetails
  jobDetails: LasecJobDetails
  customer: LasecCRMCustomer
  organization: LasecCRMOrganisation
  address: LasecClientAddresses
  clientDocuments: [LasecDocument]
  confirmed: Boolean
  valid: Boolean
  saved: Boolean
  createdBy: User
  created: Date
  updated: Date
}

type NewClientResponse {
  client: LasecCRMClient
  success: Boolean
  messages: [UXMessage]
}

input LasecNewClientInput {
  id: String
  personalDetails: Any
  contactDetails: Any
  jobDetails: Any
  customer: Any
  organization: Any
  address: Any
}

input ClientUpdateInput {
  clientId: String!
  clientStatus: String
  title: String
  firstName: String
  lastName: String
  country: String
  mobileNumber: String
  officeNumber: String
  alternateOfficeNumber: String
  email: String
  alternateEmail: String
  accountType: String
  repCode: String
  jobTitle: String
  clientDepartment: String
  clientClass: String
  ranking: String

  faculty: String
  customerType: String
  lineManager: String
  jobType: String

}

input AddressFields {
  unitNumber: String,
  unitName: String,
  streetNumber: String,
  streetName: String,
  suburb: String,
  metro: String,
  city: String,
  postalCode: String,
  province: String,
  country: String,
}

input NewAddressInput {
  buildingDescriptionId: String
  buildingFloorNumberId: String
  unit: String
  addressFields: AddressFields
}

type NewAddressResponse {
  success: Boolean
  message: String
  id: String
  fullAddress: String
}

type GoogleAddressDetails {
  streetName: String
  streetNumber: String
  suburb: String
  city: String
  metro: String
  province: String
  postalCode: String
  country: String
}

type CRMClientComment {
  id: String
  who: User
  comment: String
  when: Date
}

extend type Query {
  LasecGetClientList(
    search: String!
    paging: PagingRequest
    filterBy: String
    iter: Int
    filter: String
    repCode: String
    selectedClient: Any
    orderBy: String
    orderDirection: String
  ): PagedCRMClient

  LasecGetClientDetail(id: String!): LasecCRMClient

  LasecGetCustomerList(
    search: String!
    paging: PagingRequest
    filterBy: String
    iter: Int
  ): PagedCRMCustomer
  LasecGetClientComments(clientId: String!): [CRMClientComment]
  LasecGetCustomerDetail(id: String!): LasecCRMCustomer
  LasecGetCustomerClass: [LasecCustomerClassLookupItem]
  LasecGetFacultyList: [LasecFacultyListLookupItem]

  LasecGetCustomerType: [LasecCustomerTypeLookupItem]
  LasecGetCustomerLineManagerOptions(customerId: String): [LasecLineManagerLookupItem]

  LasecGetCustomerClassById(id: String): LasecCustomerClassLookupItem
  LasecGetCustomerRanking: [LasecCustomerRankingLookupItem]
  LasecGetCustomerRankingById(id: String): LasecCustomerRankingLookupItem
  LasecGetCustomerRoles: [LasecCustomerRolesLookupItem]
  LasecGetCustomerJobTypes: [LasecCustomerJobTypesLookupItem]
  LasecGetCustomerJobTypeById(id: String): LasecCustomerJobTypesLookupItem
  LasecGetCustomerCountries: [LasecCountryLookupItem]
  LasecGetCustomerRepCodes: [LasecRepCodeLookupItem]
  LasecGetCustomerFilterLookup(filterBy: String): [LasecCustomerFilterLookupItem]
  LasecGetCustomerDocuments(id: String, uploadContexts: [String], paging: PagingRequest): PagedLasecDocument
  LasecGetPersonTitles: [LasecTitleLookupItem]
  LasecGetPersonTitleById(id: String): LasecTitleLookupItem
  # LasecGetNewClient: LasecNewClient
  """
  Returns the currently cached object that is associated with the new client onboarding
  screen.  The data can be used in the context of an existing client that is either 
  unfinished or deactivated.

  id - The id of the object to load.  if the id can be parsed as a number it will load 
       the remote client object from the Lasec API.  This data is merged with the 
       new object id that is in the cache

  reset - If true, the current data will be reset in the cache and a default new 
       customer object is returned 

  """
  LasecGetNewClient(id: String, reset: Boolean): LasecNewClient
  LasecGetOrganisationList(search: String! paging: PagingRequest filterBy: String iter: Int): PagedCRMOrganisation
  LasecGetPlaceDetails(placeId: String!): GoogleAddressDetails

  """
  Use this function to search for Addresses that is contained in the 
  lasec api.  Accepts one required property "searchTerm", this will 
  do a wildcard search against the api.
  """
  LasecGetAddress(searchTerm: String!): [LasecAddress]
  """
  Use this function to expand the address details for a 
  particular id
  """
  LasecGetAddressById(id: String!): LasecAddress
}

extend type Mutation {
  LasecUpdateClientDetails(clientInfo: ClientUpdateInput!): ClientDetailUpdateResponse
  LasecUploadCustomerDocument(id: String, file: Upload!): LasecDocument
  LasecUploadDocument(file: Upload!, uploadContext: String): LasecDocument
  LasecDeleteNewClientDocuments(fileIds: [String]!): UXMessage
  LasecCreateNewOrganisation(customerId: String, name: String, description: String): CreateNewOrganisationResponse
  LasecCreateNewClient(id: String, newClient: LasecNewClientInput): NewClientResponse
  LasecUpdateNewClient(clientId: String, newClient: LasecNewClientInput): LasecNewClient
  # LasecUpdateNewClient(newClient: LasecNewClientInput): LasecNewClient
  LasecCreateNewAddress(addressDetails: NewAddressInput!): NewAddressResponse
  LasecCRMSaveComment(clientId: String!, comment: String!): SimpleResponse
  LasecCRMDeleteComment(commentId: String!): SimpleResponse
  LasecDeactivateClients(clientIds: [String]!): SimpleResponse
  LasecUpdateSpecialRequirements(id: String!,  requirement: String!): SimpleResponse
}
