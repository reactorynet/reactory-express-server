type LasecCRMCustomer {
  id: String
  registeredName: String
  tradingName: String
  accountNumber: String
  customerStatus: String
  accountType: String
  country: String
  customerClass: String
  description: String
  ranking: String
  availableBalance: Float
  salesTeam: String
  physicalAddressId: Int
  physicalAddress: String
  deliveryAddressId: Int
  deliveryAddress: String
  billingAddressId: Int
  billingAddress: String
  currencyCode: String
  currencySymbol: String
  currencyDisplay: String
  registrationNumber: String
  taxNumber: String
  creditLimit: Float
  currentBalance: Float
  currentInvoice: Float
  balance30Days: Float
  balance60Days: Float
  balance90Days: Float
  balance120Days: Float
  creditTotal: Float
  documents: [LasecDocument]
}

type LasecCRMOrganisation {
  id: String
  name: String
  description: String
}

type LasecCRMClient {
  id: String
  clientStatus: String
  emailAddress: String
  alternateEmail: String
  accountType: String
  customer: LasecCRMCustomer
  fullName: String
  firstName: String
  lastName: String
  department: String
  jobTitle: String
  country: String
  salesTeam: String
  mobileNumber: String
  officeNumber: String
  alternateOfficeNumber: String
  availableBalance: Float
  creditLimit: Float
}

type LasecDocument {
  id: String
  filename: String
  link: String
  mimetype: String
  size: Int
  public: Boolean
  published: Boolean
}

type PagedLasecDocument {
  search: String
  filterBy: String
  paging: PagingResult
  documents: [LasecDocument]
}

type PagedCRMClient {
  search: String
  filterBy: String
  paging: PagingResult
  clients: [LasecCRMClient]
}

type PagedCRMCustomer {
  search: String
  filterBy: String
  paging: PagingResult
  customers: [LasecCRMCustomer]
}

type PagedCRMOrganisation {
  search: String
  filterBy: String
  paging: PagingResult
  organisations: [LasecCRMOrganisation]
}

type ClientDetailUpdateResponse {
  Success: Boolean
}

type LasecLookupItem {
  id: String
  name: String
  description: String
}

type LasecTitleLookupItem {
  id: String
  title: String
  long_title: String
}

type CreateNewOrganisationResponse {
  id: Int
  success: Boolean
}

type LasecClientPersonalDetails {
  title: String
  firstName: String
  lastName: String
  country: String
  accountType: String
  repCode: String
}

type LasecAddress {
  id: String
  fullAddress: String
  map: Any
}

type LasecContactDetails {
  emailAddress: String
  confirmEmail: String
  alternateEmail: String
  confirmAlternateEmail: String
  mobileNumber: String
  alternateMobile: String
  officeNumber: String
  prefferedMethodOfContact: String
}

type LasecJobDetails {
  jobTitle: String
  jobType: String
  salesTeam: String
  lineManager: String
  customerType: String
  customerClass: String
  faculty: String
  clientDepartment: String
  ranking: String
}

type LasecClientAddresses {
  physicalAddress: LasecAddress
  deliveryAddress: LasecAddress
  billingAddress: LasecAddress
}

type LasecNewClient {
  id: String
  personalDetails: LasecClientPersonalDetails
  contactDetails: LasecContactDetails
  jobDetails: LasecJobDetails
  customer: LasecCRMCustomer
  organization: LasecCRMOrganisation
  address: LasecClientAddresses
  clientDocuments: [LasecDocument]
  confirmed: Boolean
  valid: Boolean
  saved: Boolean
  createdBy: User
  created: Date
  updated: Date
}

type NewClientResponse {
  client: LasecCRMClient
  success: Boolean
  messages: [UXMessage]
}

input LasecNewClientInput {
  id: String
  personalDetails: Any
  contactDetails: Any
  jobDetails: Any
  customer: Any
  organization: Any
  address: Any
}

input ClientUpdateInput {
  clientId: String!
  clientStatus: String
  firstName: String
  lastName: String
  country: String
  mobileNumber: String
  officeNumber: String
  alternateOfficeNumber: String
  email: String
  alternateEmail: String
  accountType: String
  repCode: String
  jobTitle: String
  clientDepartment: String
  clientClass: String
  ranking: String
}

input AddressFields {
  unitNumber: String,
  unitName: String,
  streetNumber: String,
  streetName: String,
  suburb: String,
  metro: String,
  city: String,
  postalCode: String,
  province: String,
  country: String,
}

input NewAddressInput {
  buildingDescriptionId: String
  buildingFloorNumberId: String
  unit: String
  addressFields: AddressFields
}

type NewAddressResponse {
  success: Boolean
  message: String
  id: String
  fullAddress: String
}

type GoogleAddressDetails {
  streetName: String
  streetNumber: String
  suburb: String
  city: String
  metro: String
  province: String
  postalCode: String
  country: String
}

extend type Query {
  LasecGetClientList(
    search: String!
    paging: PagingRequest
    filterBy: String
    iter: Int
    filter: String
  ): PagedCRMClient
  LasecGetClientDetail(id: String!): LasecCRMClient
  LasecGetCustomerList(
    search: String!
    paging: PagingRequest
    filterBy: String
    iter: Int
  ): PagedCRMCustomer
  LasecGetCustomerDetail(id: String!): LasecCRMCustomer
  LasecGetCustomerClass: [LasecLookupItem]
  LasecGetCustomerClassById(id: String): LasecLookupItem
  LasecGetCustomerRanking: [LasecLookupItem]
  LasecGetCustomerRankingById(id: String): LasecLookupItem
  LasecGetCustomerRoles: [LasecLookupItem]
  LasecGetCustomerJobTypes: [LasecLookupItem]
  LasecGetCustomerJobTypeById(id: String): LasecLookupItem
  LasecGetCustomerCountries: [LasecLookupItem]
  LasecGetCustomerRepCodes: [LasecLookupItem]
  LasecGetCustomerFilterLookup(filterBy: String): [LasecLookupItem]
  LasecGetCustomerDocuments(id: String, uploadContexts: [String], paging: PagingRequest): PagedLasecDocument
  LasecGetPersonTitles: [LasecTitleLookupItem]
  LasecGetPersonTitleById(id: String): LasecTitleLookupItem
  LasecGetNewClient: LasecNewClient
  LasecGetOrganisationList(search: String! paging: PagingRequest filterBy: String iter: Int): PagedCRMOrganisation
  LasecGetPlaceDetails(placeId: String!): GoogleAddressDetails
  LasecGetAddress(searchTerm: String!): [String!]
}

extend type Mutation {
  LasecUpdateClientDetails(clientInfo: ClientUpdateInput!): ClientDetailUpdateResponse
  LasecUploadCustomerDocument(id: String, file: Upload!): LasecDocument
  LasecUploadDocument(file: Upload!, uploadContext: String): LasecDocument
  LasecDeleteNewClientDocuments(fileIds: [String]!): UXMessage
  LasecCreateNewOrganisation(customerId: String, name: String, description: String): CreateNewOrganisationResponse
  LasecCreateNewClient(newClient: LasecNewClientInput): NewClientResponse
  LasecUpdateNewClient(newClient: LasecNewClientInput): LasecNewClient
  LasecCreateNewAddress(addressDetails: NewAddressInput!): NewAddressResponse
}
