
type ClientAuthConfig {
  provider: String
  enabled: Boolean
  successCallbackUrl: String
  failedCallbackUrl: String
  apikey: String
  apipass: String
  scopes: [String]
}

type ComponentArgs {
  key:  String
  value: Any
}

type ClientComponent {
  id: ObjID
  name: String
  nameSpace: String
  version: String
  title: String
  description: String
  author: User
  roles: [String]
  args: [ComponentArgs]
}

type ReactoryUXMessageAction {
  id: String
  action: String
  title: String
  icon: String
  componentFqn: String
  componentProps: Any
  modal: Boolean
  modalSize: String
  priority: Int
}

type ReactoryUXMessage {
  id: String
  title: String
  text: String
  data: Any
  via: String
  icon: String
  actions: [ReactoryUXMessageAction]  
  image: String
  requireInteraction: Boolean
  silent: Boolean
  timestamp: Date
  vibrate: [Int]  
}

type ClientRoute {
  id: ObjID
  path: String
  public: Boolean
  roles: [String]
  componentFqn: String
  exact: Boolean
  component: [ClientComponent]
  args: [ComponentArgs]
}

type KeyPair {
  id: ObjID
  key: String
  value: String
}

type ReactoryClient {
  id: ObjID
  name: String
  clientKey: String
  username: String
  email: String
  salt: String
  password: String
  avatar: String
  auth_config: [ClientAuthConfig]
  menus: [Menu]
  routes: [ClientRoute]
  whitelist: [String]
  createdAt: Date
  updatedAt: Date
}

type ApiStatus {
    when: Date!
    status: String!
    firstName: String
    lastName: String
    avatar: String
    email: String
    organization: Organization
    businessUnit: BusinessUnit
    id: String
    roles: [String]
    menus: [Menu]
    routes: [ClientRoute]
    memberships: [UserMembership]
    applicationAvatar: String
    applicationName: String
    theme: String
    themeOptions: Any
    colorSchemes: Any
    messages: [ReactoryUXMessage]        
}

extend type Query {
  clientWithId(id: String): ReactoryClient
}

input CreateReactoryClient {
  name: String
  clientKey: String
  username: String
  email: String
  password: String 
}

extend type Mutation {
  registerNewClient(input: CreateReactoryClient!): ReactoryClient  
}