

type FromEmailAddress {
  email: String
  display: String
}
type ToEmailAddress {
  email: String
  display: String
}

type Email {
  id: String,
  sendAfter: Date,
  sentAt: Date,
  receivedAt: Date,
  sent: Boolean,
  error: String,
  failures: Int,
  from: Email,
  message: String,
  subject: String,
  to: [ToEmailAddress],
  cc: [ToEmailAddress],
  bcc: [ToEmailAddress],
  archived: Boolean,
  createdAt: Date,
  format: String,
  user: User,
  client: ReactoryClient,
  survey: Survey,
  isRead: Boolean
  source: String
  meta: Any
}

type EmailAttachment {
  id: String  
  link: String
  filename: String
  original: String
  size: String
  mimetype: String
  path: String
}

input ToEmail  {
   email: String
   display: String
}

input InputEmailAddress {
  email: String
  display: String
}

input AddAttachment {
  id: String  
  link: String
  filename: String
  original: String
  size: String
  mimetype: String
  path: String
}

input CreateEmailMessage {
  id: String
  via: String,
  from: InputEmailAddress
  subject: String
  message: String
  to: [InputEmailAddress]
  cc: [InputEmailAddress]
  bcc: [InputEmailAddress]
  attachments: [AddAttachment]
  meta: Any,  
}

input MailFilter {
  from: String
  periodStart: Date
  periodEnd: Date
  search: String
  via: [String]
  user: ObjID
}


extend type Query {
  userEmails(mailFilter: MailFilter) : [Email]
}

