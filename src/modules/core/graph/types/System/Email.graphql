
type EmailAddress {
  email: String
  display: String
}

type Email {
  id: String,
  sendAfter: Date,
  sentAt: Date,
  receivedAt: Date,
  sent: Boolean,
  error: String,
  failures: Int,
  from: Email,
  message: String,
  subject: String,
  to: [EmailAddress],
  cc: [EmailAddress],
  bcc: [EmailAddress],
  archived: Boolean,
  createdAt: Date,
  format: String,
  user: User,
  client: ReactoryClient,
  survey: Survey,
  isRead: Boolean
  source: String
  meta: Any
}

type EmailAttachment {
  id: String
  url: String
  name: String
  mimeType: String
}

input ToEmail {
   email: String
   display: String
}

input AddAttachments {
   id: String!
   name: String
}

input CreateEmailMessage {
  id: String
  via: String,
  fromEmail: String
  fromTitle: String  
  subject: String
  message: String
  to: [ToEmail]
  cc: [ToEmail]
  bcc: [ToEmail]
  attachments: [AddAttachments]
  meta: Any,  
}

input MailFilter {
  from: String
  periodStart: Date
  periodEnd: Date
  search: String
  via: [String]
  user: ObjID
}

extend type Query {
  userEmails(mailFilter: MailFilter) : [Email]
}

