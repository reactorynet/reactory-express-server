enum Operator {
  EQ
  GT
  GTEQ
  LT
  LTEQ
  BETWEEN
  LIKE
  IN
}

enum OperationModifier {
  AND
  OR
}


type SQLColumn {
  field: String
  title: String
  widget: String
  selected: Boolean
}

input SQLColumnInput {
  field: String
  title: String
  widget: String
  selected: Boolean
}


type SQLContext {
  schema: String
  table: String
  commandText: String
  provider: String
  connectionId: String
}

input SQLContextInput {
  schema: String
  table: String
  commandText: String
  provider: String
  connectionId: String
}


type SQLFilter {
  field: String
  value: Any
  operator: Operator
  modifier: OperationModifier
  invert: Boolean
}

input SQLFilterInput {
  field: String
  title: String
  value: Any
  operator: Operator
}

input PagingRequest {
  page: Int
  pageSize: Int
  total: Int
  hasNext: Boolean
}

type PagingResult {
  total: Int
  page: Int
  hasNext: Boolean
  pageSize: Int
}

type SQLQueryResult {
  paging: PagingResult
  columns: [ SQLColumn ]
  filters: [ SQLFilter ]
  context: SQLContext
  data: [ Any ]
}

type SQLInsertResult {
  columns: [ SQLColumn ]
  success: Boolean
  recordsAffected: Int
}

type SQLUpdateResult {
  success: Boolean
  recordsAffected: Int
}

type SQLDeleteResult {
  success: Boolean
  recordsAffected: Int
}

input SQLQuery {
  paging: PagingRequest
  columns: [ SQLColumnInput ]
  filters: [ SQLFilterInput ]
  context: SQLContextInput
}

input SQLInsert {
  columns: [ SQLColumnInput ]
  values: [ Any ]
  context: SQLContextInput
}

input SQLUpdate {
  columns: [ SQLColumnInput ]
  values: [ Any ]
  context: SQLContextInput
}

input SQLDelete {
  columns: [ SQLColumnInput ]
  filter: [ SQLFilterInput ]
  context: SQLContextInput
}

extend type Query {
  ReactorySQLQuery(input: SQLQuery): SQLQueryResult
}

extend type Mutation {
  ReactorySQLInsert(input: SQLInsert): SQLInsertResult
  ReactorySQLUpdate(input: SQLUpdate): SQLUpdateResult
  ReactorySQLDelete(input: SQLDelete): SQLDeleteResult
}
