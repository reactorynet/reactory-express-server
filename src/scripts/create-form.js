const fs = require('fs');
const argv = require('minimist')(process.argv.slice(2));
const path = require('path');

const v = '1.0.0';
const readline = require('readline');

async function main(argv) {
  if (typeof argv.fqn === 'string' && argv.fqn !== null) {
    // derive the id, name and nameSpace from the fqn as well as version

  }

  const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
  });

  const formInfo = {
    folder: 'modules',
    supportsGraphQL: false,
    supportsData: false,
    model: 'Default',
    indexJson: {
      id: 'Default',
      uiFramework: 'material',
      uiSupport: ['material', 'bootstrap'],
      uiResources: [],
      name: 'Default',
      nameSpace: '',
      version: '',
      componentDefs: [],
      helpTopics: [],
      author: {

      },
      registerAsComponent: true,
      schema: {
        type: 'object',
        title: 'Default',
        properties: {

        }
      },
      uiSchema: {},
      uiSchemas: [],
    },
  };

  const defaultUiSchemaContent = `
  // add ui schemas in this file.
  export default {

  };`;

  const question = async (question) => new Promise((resolve) => {
    rl.question(`${question}:  `, (answer) => {
      resolve(answer);
    });
  });

  const moduleName = argv.mod || await question('For which module are you adding a new form?').then();
  if (argv.verbose === true) console.debug(`Module name ${moduleName}`);

  const moduleFolder = path.resolve(`${process.cwd()}/src/modules/${moduleName}`);
  if (argv.verbose === true) console.debug(`Module Path Resolved as: ${moduleFolder}`);

  try {
    if (!fs.existsSync(`${moduleFolder}`)) {
      console.error(`The module (${moduleName}) you specified is not installed or doesn't exist - install or create the plugin using 'yarn reactory:create-plugin' or 'yarn reactory:install-plugin`);
      exit(0);
    } else {
      const nameSpace = argv.ns || await question(`What nameSpace do you want to use for your form? (blank to use module name ${moduleName})`).then();
      formInfo.nameSpace = nameSpace || moduleName;
      formInfo.folder = `${formInfo.folder}/${moduleName}/forms/`;
      formInfo.indexJson.nameSpace = formInfo.nameSpace;
      const formName = argv.n || await question('What would you like to name your form? (leave blank for \'Default\')').then();
      formInfo.model = formName || 'Default';
      formInfo.indexJson.name = formName || 'Default';
      formInfo.indexJson.id = `${nameSpace}.${formName}` || 'temp.Default';
      const folder = `${moduleFolder}/forms/${formInfo.model}`;

      const formTitle = argv.title || await question('What your form title to be? (leave blank for \'Default\')').then();
      const formDescription = argv.desc || await question('Provide a short description for your form? (leave blank for \'Default\')').then();

      formInfo.indexJson.schema.title = formTitle;
      formInfo.indexJson.schema.description = formDescription;

      argv.verbose === true ? console.debug(`Resolved Path: ${folder}`) : (0);

      rl.close();

      const jsonData = JSON.stringify(formInfo.indexJson.schema);
      argv.verbose === true ? console.debug('json data to be written', jsonData) : (0);

      if (!fs.existsSync(folder)) fs.mkdirSync(folder);
      fs.writeFileSync(`${folder}/_${formName}.json`, `${jsonData}`);
      fs.writeFileSync(`${folder}/_${formName}_defaults.json`, '');

      if (fs.existsSync(`${folder}/_${formName}.js`) === false) {
        fs.writeFileSync(`${folder}/_${formName}.js`, `
      //perform customzation of the schema here to avoid overwrites on main file.
      const $schema = require('_${formName}.json');                
      export default {
        ...$schema,
      }
      `);
      }

      fs.writeFileSync(`${folder}/_${formName}.js`, `
      //Form Generated By Reactory create-form v${v}
      //any changes you make to this file will be overwritten when re-running the script
      //perform any customizations of the schema on the _${formName.js} file
      export { default as $schema } from './_${formName}.js'
      export default $schema;
      `);

      fs.writeFileSync(`${folder}/_uiSchema.js`, `${defaultUiSchemaContent}`);
      if (!existsSync(`${folder}/_${formName}.js`)) {
        fs.writeFileSync(`${folder}/_${formName}.js`, `
      //Form Generated By Reactory create-form v${v}
      //any changes you make to this file will be overwritten when re-running the script
      //perform any customizations of the schema on the _${formName.js} file
      export { default as $schema } from './_${formName}.js'
      export default $schema;
      `);
      }

      fs.writeFileSync(`${folder}/index.js`, `
      import schema from './${formName}';
      import DefaultUiSchema from './uiSchema';
      
      const defaultFormValue = require('_${formName}_defaults.json') || null;

      const ${formInfo.model} = {
        id: '${formInfo.nameSpace}.${formName}',
        uiFramework: 'material',        
        uiSupport: ['material'],
        uiResources: [
          //add your resources
        ],
        name: '${formName}',
        nameSpace: ${formInfo.nameSpace},
        version: ${argv.version || '1.0.0'},
        componentDefs: [],
        description: '${formDescription}',
        author: {
          fullName: 'YOUR NAME',
          email: 'you@mail.com',
        },
        helpTopics: [
          '${formName}', '${formTitle}'
        ],
        defaultValue,
        registerAsComponent: true,
        schema,        
        uiSchema: DefaultUiSchema,
        uiSchemas: [
          { id: 'default', value: 'default' title: 'default', uiSchema: DefaultUiSchema, icon: 'view_stream' },
        ];     
      };
     
      export const ${formName};
      `);

      console.log(`${formName} generated. ** Remember to add your Form to the module forms/index.js for you module in order to auto load**`);
    }
  } catch (err) {
    console.error(err);
    exit(0);
  }
}

main();
