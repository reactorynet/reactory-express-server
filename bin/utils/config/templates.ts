import {
  IClientConfiguration,
  IServerConfiguration,
} from './config.types';


export const clientConfigTemplate = (configuration: IClientConfiguration) => `
# This file was generated by the Reactory CLI
# Port to run the client development server on
PORT=3000
# The public URL of the client
PUBLIC_URL=${configuration.public_url || 'http://localhost:3000/'}
# The API endpoint for the client
REACT_APP_API_ENDPOINT=${configuration.api_endpoint || 'http://localhost:4000'}
# The CDN endpoint for the client
REACT_APP_CDN=${configuration.cdn || 'http://localhost:4000/cdn'}
# The title of the client
REACT_APP_TITLE=${configuration.title || 'Reactory'}
# The theme of the client
REACT_APP_THEME=${configuration.theme || 'reactory'}
# The client key
REACT_APP_CLIENT_KEY=${configuration.client_key || 'reactory'}
# The shortname of the client
REACT_APP_SHORTNAME=${configuration.shortname || 'Reactory'}
# The client password
REACT_APP_CLIENT_PASSWORD=${configuration.client_password || 'reactory'}
# The primary theme color
REACT_APP_THEME_PRIMARY=${configuration.theme_primary || '#464775'}
# The background theme color
REACT_APP_THEME_BG=${configuration.theme_bg || '#f5f5f5'}
# The webroot for the client - this is used
# when using the deployment script to deploy
# the client to a CDN using the reactory server
# as the deployment server.
REACT_APP_WEBROOT=${configuration.webroot || '/var/www/reactory'}
# The Froala key - Froala is used for wysiwyg editing in the
# client application. You can get a key from https://froala.com/wysiwyg-editor/pricing 
# and then set it here. (You can get a free key for development)
REACT_APP_FROALA_KEY=${configuration.froala_key || ''}
# The environment for the client
NODE_ENV=${configuration.environment || 'development'}
# The babel environment for the client
BABEL_ENV=${configuration.babel_env || 'development'}
# The CI environment variable is used to determine if the
# client is being built in a CI environment.  This is used
# to determine if the client should be built in production
# mode or development mode.
CI=${configuration.ci || 'false'}
`


/**
 * Template function used to generate the .env file for the server
 * configuration.
 * @param configuration 
 * @returns 
 */
export const serverConfigTemplate = (configuration: IServerConfiguration, envName: string) => `
# Path: config/${configuration.name}/.env.${envName}
# This file contains the configuration for the ${configuration.name} server.
# The configuration is used to set the environment variables for the server instance.
# You can add additional environment variables to this file, but you should not
# remove any of the variables that are already in the file as they are used by
# the application.
# The REACTORY_APPLICATION_* variables are used to create the initial
# admin user for the application.  This user will be able to create
# additional users and manage the application.
REACTORY_APPLICATION_EMAIL=${configuration.reactory_application_email}
# The REACTORY_APPLICATION_USERNAME is the username used for the reactory
# base application that ships with the reactory-core package.
REACTORY_APPLICATION_USERNAME=${configuration.reactory_application_name}
# The REACTORY_APPLICATION_PASSWORD is the password used for the reactory
# base application that ships with the reactory-core package. This password
# needs to be added to your client configuration as well.
REACTORY_APPLICATION_PASSWORD=${configuration.reactory_application_password}
# The SERVER_ID is the name of the server.  This is used to identify the
# server in the application.  It is also used to identify the server in
# the logs.
SERVER_ID=${configuration.server_id || `${configuration.name}.local`}
# The APP_DATA_ROOT is the root folder for the application data.  This
# folder will contain templates, pdfs, and other files that are used
# by the application. It will also store profile images and other
# user and organization data.
APP_DATA_ROOT=${configuration.app_data_root}
# The APP_SYSTEM_FONTS is the folder that contains the fonts that are
# used by the application.  This should generally be set to the system 
# fonts folder, but the data/fonts folder is included in the reactory-data 
# project that contains most common fonts.
APP_SYSTEM_FONTS=${configuration.app_system_fonts}
# The MONGOOSE variable is the connection string for the MongoDB database
# that is used by the application. if left blank, the application will
# use the name of the configuration folder as the database name.
MONGOOSE=${configuration.mongoose_connection}
# The MODULES_ENABLED variable is the name of the json file that contains
# the list of modules that are enabled for the application.
MODULES_ENABLED=${configuration.modules_enabled}
# The CLIENTS_ENABLED variable is the name of the json file that contains
# the list of clients that are enabled for the application.
CLIENTS_ENABLED=${configuration.clients_enabled}
# The PORT variable is the port that the application will listen on.
API_PORT=${configuration.port || 4000}
# The SENDGRID_API_KEY variable is the API key used to send emails if you want
# to use sendgrid.  If you do not want to use sendgrid, set this to 'SG.disabled'
SENDGRID_API_KEY=${configuration.sendgrid_api_key || 'SG.disabled'}
# The API_URI_ROOT is the root URI for the API.  This is used to generate
# links in emails and other places where the API is referenced.
API_URI_ROOT=${configuration.api_uri_root || 'http://localhost:4000'}
# The CDN_ROOT is the root URI for the CDN.  This is used to generate
# links in emails and other places where the CDN is referenced.
CDN_ROOT=${configuration.cdn_root || 'http://localhost:4000/cdn'}
# The SECRET_SAUCE is the secret key used to sign the JWT tokens.  This
# should be a long, random string. A good example of a random string is
# the output of the following command: openssl rand -base64 32
SECRET_SAUCE=${configuration.secret_key || 'secret'}
# The MODE variable is the mode that the application is running in.  This
# can be DEVELOPMENT, PRODUCTION, or TEST.
MODE=${configuration.mode || 'DEVELOPMENT'}
# The MONGO_USER is the username used to connect to the MongoDB database.
MONGO_USER=${configuration.mongo_user || 'reactory'}
# The MONGO_PASSWORD is the password used to connect to the MongoDB database.
MONGO_PASSWORD=${configuration.mongo_password || 'reactory'}
# The MAIL_REDIRECT_ENABLED is a comma separated list of modes that will
# redirect all emails to the MAIL_REDIRECT_ADDRESS.  This is useful for
# testing email functionality without sending emails to real users.
MAIL_REDIRECT_ENABLED=${configuration.mail_redirect_enabled || 'development,production'} 
# The MAIL_REDIRECT_ADDRESS is the email address that all emails will be
# redirected to if MAIL_REDIRECT_ENABLED is set to true.
MAIL_REDIRECT_ADDRESS=${configuration.mail_redirect_address || configuration.system_user_id || 'user@mail.com'}

# Microsoft OAUTH
# The OAUTH_APP_ID is the application ID for the Microsoft OAUTH application. You can 
# create an application at https://apps.dev.microsoft.com
OAUTH_APP_ID=${configuration.oauth_app_id || '00000000-0000-0000-0000-000000000000'}
# The OAUTH_APP_PASSWORD is the application password for the Microsoft OAUTH application. You can
OAUTH_APP_PASSWORD=${configuration.oauth_app_password || '00000000-0000-0000-0000-000000000000'}
# The OAUTH_REDIRECT_URI is the redirect URI for the Microsoft OAUTH application.  This should
# be set to the URI of the application with the /auth/microsoft/openid/complete path appended.
OAUTH_REDIRECT_URI=${configuration.oauth_redirect_uri || 'http://localhost:4000/auth/microsoft/openid/complete'}
# The OAUTH_SCOPES is a comma separated list of scopes that are requested from the Microsoft
# OAUTH application.  The default scopes are profile, offline_access, user.read, calendars.read,
# mail.read, and email. You can find more information about scopes at https://developer.microsoft.com/en-us/graph/docs/concepts/permissions_reference
OAUTH_SCOPES="${configuration.oauth_scopes || 'profile offline_access user.read calendars.read mail.read email'}"s
# The OAUTH_AUTHORITY is the authority for the Microsoft OAUTH application.  This should not
# need to be changed unless you are using a different authority.
OAUTH_AUTHORITY=${configuration.oauth_authority || 'https://login.microsoftonline.com/common'}
# The OAUTH_ID_METADATA is the metadata endpoint for the Microsoft OAUTH application.  This
OAUTH_ID_METADATA=${configuration.oauth_id_metadata || '/v2.0/.well-known/openid-configuration'}
# The OAUTH_AUTHORIZE_ENDPOINT is the authorization endpoint for the Microsoft OAUTH application.
OAUTH_AUTHORIZE_ENDPOINT=${configuration.oauth_authorize_endpoint || '/oauth2/v2.0/authorize'}
# The OAUTH_TOKEN_ENDPOINT is the token endpoint for the Microsoft OAUTH application.
OAUTH_TOKEN_ENDPOINT=${configuration.oauth_token_endpoint || '/oauth2/v2.0/token'}
# The I18N_NS is the namespace for the i18n translations.  This should be set to the name of
# the configuration folder. e.g. if you want the system to load translations from the
# $APP_DATA_ROOT/i18n/en-us/acme.json file, then the I18N_NS should be set to 'acme'.
# by default the common.json, forms.json and reactory.json files will be loaded from by i18n.
I18N_NS=${configuration.translation_namespace || configuration.name}
`;